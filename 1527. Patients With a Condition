Table: Patients

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| patient_id   | int     |
| patient_name | varchar |
| conditions   | varchar |
+--------------+---------+
patient_id is the primary key (column with unique values) for this table.
'conditions' contains 0 or more code separated by spaces. 
This table contains information of the patients in the hospital.
 

Write a solution to find the patient_id, patient_name, and conditions of the patients who have Type I Diabetes. Type I Diabetes always starts with DIAB1 prefix.

Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
Patients table:
+------------+--------------+--------------+
| patient_id | patient_name | conditions   |
+------------+--------------+--------------+
| 1          | Daniel       | YFEV COUGH   |
| 2          | Alice        |              |
| 3          | Bob          | DIAB100 MYOP |
| 4          | George       | ACNE DIAB100 |
| 5          | Alain        | DIAB201      |
+------------+--------------+--------------+
Output: 
+------------+--------------+--------------+
| patient_id | patient_name | conditions   |
+------------+--------------+--------------+
| 3          | Bob          | DIAB100 MYOP |
| 4          | George       | ACNE DIAB100 | 
+------------+--------------+--------------+
Explanation: Bob and George both have a condition that starts with DIAB1.

üìçSELECT *
FROM patients
WHERE conditions REGEXP '\\bDIAB1'


üåüüåüSyntax:
column_name REGEXP pattern

üåüüåüBasic Usage:
Matching a Specific Word:
‚≠êÔ∏è To find rows where a column contains the word "apple" (ensuring it's a standalone word):
SELECT * 
FROM your_table 
WHERE column_name REGEXP '[[:<:]]apple[[:>:]]';

‚≠êÔ∏èCase-insensitive Matching:
In MySQL, the REGEXP operator is case-insensitive by default. 
However, if using a database where it's case-sensitive, might need to use a flag or convert both the column and pattern to lowercase:
SELECT * 
FROM your_table 
WHERE LOWER(column_name) REGEXP LOWER('pattern');

‚≠êÔ∏èMatching Any of Multiple Words:
To match any of the words "apple", "banana", or "cherry":
SELECT * 
FROM your_table 
WHERE column_name REGEXP 'apple|banana|cherry';

‚ùåLimitations and Differences:
The exact syntax for REGEXP and the supported regular expression features can vary between database systems.
Some databases, like PostgreSQL, use different operators (e.g., ~ for case-sensitive matching or ~* for case-insensitive matching) instead of REGEXP.
The performance of REGEXP can be slower than simpler operators like LIKE, especially on large datasets, as regular expressions are more computationally intensive.
Not all SQL databases support the REGEXP operator, so always check the documentation for your specific database.
In summary, while REGEXP provides powerful pattern-matching capabilities, it's important to use it judiciously and be aware of its potential performance implications. 
