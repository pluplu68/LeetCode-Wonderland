Given an integer array nums, find the 
subarray
 with the largest sum, and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.




📍  def maxSubArray(self, nums: List[int]) -> int:
        maxSub = nums[0]
        currentSum = 0

        for n in nums:
            if currentSum <0:        
                currentSum = 0      #Within the loop, this if statement checks if currentSum is less than 0. 
                                      If it is, currentSum is reset to 0. This step is important because if the current sum becomes negative, 
                                      it means that the subarray's contribution to the total sum is not helping to maximize the sum, 
                                        so it's better to start a new subarray from the current element.
            currentSum += n
            maxSub = max(maxSub, currentSum)
        return maxSub
