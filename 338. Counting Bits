Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.

Example 1:

Input: n = 2
Output: [0,1,1]
Explanation:
0 --> 0
1 --> 1
2 --> 10
Example 2:

Input: n = 5
Output: [0,1,1,2,1,2]
Explanation:
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101

📍 def countBits(self, n: int) -> List[int]:
        dp = [0]*(n+1) #The dp list will be used to store the count of set bits for each number from 0 to n.
        offset = 1 #keep track of the current power of 2 being processed.
        
        for i in range(1, n+1):
            if offset * 2 == i:  #checks if the current number i is a power of 2. If it is, the offset is updated to i.
                offset = i
            dp[i] = 1 + dp[i-offset]
        return dp
