Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

Example 1:

Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.
Example 2:

Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.
Example 3:

Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 

📍 def findMin(self, nums: List[int]) -> int:
        result = nums[0]
        l, r = 0, len(nums)-1      # Two variables, l and r, are initialized with the values 0 and len(nums) - 1, respectively. These variables will be used to represent the left and right boundaries of the portion of the array currently being considered.
        while l<=r:
            if nums[l]<nums[r]:
                result = min(result, nums[l])     # checks if the element at the left boundary (nums[l]) is less than the element at the right boundary (nums[r]). If this condition is true, it means that the current portion of the array is sorted, and the minimum value is at the left boundary. So, it updates the result variable with the minimum of the current result and nums[l] and breaks out of the loop since the minimum is found.
                break
            m = (l+r)//2   # divide the array into two halves for binary search.
            result = min(result, nums[m])
            if nums[m] >= nums[l]:
                l = m+1     #checks if the value at the middle index nums[m] is greater than or equal to the value at the left boundary nums[l]. If this condition is true, it means that the left half of the current portion of the array is sorted, so we update the left boundary l to m + 1 to consider the right half.
            else:
                r = m-1      #the right half of the current portion of the array is sorted, so we update the right boundary r to m - 1 to consider the left half.
        return result
