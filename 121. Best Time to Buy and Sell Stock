You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.



üìçdef maxProfit(self, prices):
        if not prices:
            return 0
        
        timeToBuy=0
        minPrice=prices[0]
        
        for i in range(1,len(prices)):
            if prices[i]<minPrice:
                minPrice=prices[i]
            else:
                timeToBuy=max(timeToBuy,prices[i]-minPrice)
        return timeToBuy

‚ùìdef maxProfit(self, prices: List[int]) -> int:
        l, r = 0, 1     
        maxP = 0
        while r < len(prices):
            if prices[l] < prices[r]:
                profit = prices[r] - prices[l]
                maxP = max(maxP, profit)
            else:
                l = r   ‚ùìwhy not l += 1‚ùì
                r += 1
        return maxP
