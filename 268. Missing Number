Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.
Example 1:

Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.
Example 2:

Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.
Example 3:

Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.

1️⃣simple and straightforward
📍    def missingNumber(self, nums: List[int]) -> int:
        return sum(range(len(nums) + 1)) - sum(nums)

2️⃣not easy to follow
📍   def missingNumber(self, nums: List[int]) -> int:
        res = len(nums)  #res will initially be set to the maximum possible value, which is n in the range from 0 to n
        for i in range(len(nums)):
            res += (i-nums[i]) #the difference between the expected value i (the index of the element in the sequence from 0 to n) and the actual value nums[i] at that index. This difference represents the "error" or "discrepancy" between the expected value and the value found in nums.
        return res

🌀example: res = 3 (the length of nums)
In the loop:
i = 0, nums[i] = 0, so (i - nums[i]) is 0.
i = 1, nums[i] = 1, so (i - nums[i]) is 0.
i = 2, nums[i] = 3, so (i - nums[i]) is -1.
The final res value is 3 + 0 + 0 - 1 = 2, which is the missing number.




