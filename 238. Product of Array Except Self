Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]

📍   def productExceptSelf(self, nums: List[int]) -> List[int]:
        res = [1] * (len(nums))  #  initializes a list called res with a length equal to the length of the input list nums. 
                                 #  All elements of the res list are set to 1. This list will store the final result.

        prefix = 1  #initializes a variable called prefix to 1. This variable will be used to keep track of the product of all elements before the current element in the nums list during the first loop.
        for i in range(len(nums)):
            res[i] = prefix      # assigns the current value of prefix to the i-th element of the res list. This effectively stores the product of all elements before the current element in the res list.
            prefix = prefix * nums[i]  # updates the prefix variable by multiplying it with the current element nums[i]. This multiplication includes the current element in the product for the next iteration.
        postfix = 1
        for i in range(len(nums)-1,-1,-1):
            res[i] = res[i]*postfix
            postfix = postfix * nums[i]
        return res

🛑
