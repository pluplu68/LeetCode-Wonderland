Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.


📍 def threeSum(self, nums: List[int]) -> List[List[int]]:
        res = []
        nums.sort()

        for i, v in enumerate(nums):
            if i > 0 and v == nums[i-1]:  #checks if the current element v is equal to the previous element in the sorted list (nums[i-1]) -> duplicate element, so it continues to the next iteration of the loop to avoid processing duplicate elements.
                continue
            l, r = i+1, len(nums)-1  #l starts at the element immediately to the right of v, and r starts at the last element in the list.
            while l < r:
                threeSum = v + nums[l] + nums[r]
                if threeSum > 0: #the sum is too large. In this case, the r pointer is decremented to consider a smaller value from the right end of the window.
                    r -= 1
                elif threeSum < 0: #the sum is too small. In this case, the l pointer is incremented to consider a larger value from the left end of the window.
                    l += 1
                else: 
                    res.append([v, nums[l], nums[r]]) 
                    l += 1  #the l pointer is incremented to consider the next unique value from the left end of the window. 
                    while nums[l] == nums[l-1] and l < r: #skip duplicate values.
                        l += 1
        return res
