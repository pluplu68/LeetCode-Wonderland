Table: Person

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| email       | varchar |
+-------------+---------+
id is the primary key (column with unique values) for this table.
Each row of this table contains an email. The emails will not contain uppercase letters.
 

Write a solution to report all the duplicate emails. Note that it's guaranteed that the email field is not NULL.

Return the result table in any order.

The result format is in the following example.

Example 1:

Input: 
Person table:
+----+---------+
| id | email   |
+----+---------+
| 1  | a@b.com |
| 2  | c@d.com |
| 3  | a@b.com |
+----+---------+
Output: 
+---------+
| Email   |
+---------+
| a@b.com |
+---------+
Explanation: a@b.com is repeated two times.


📍# 1
SELECT email from Person
group by email
having count(email) > 1;

📍# 2.
SELECT DISTINCT(p1.email) from Person p1, Person p2
where p1.id <> p2.id AND p1.email = p2.email;

📍#3. 
SELECT DISTINCT(p1.email) from 
Person p1 JOIN Person p2 ON
p1.email = p2.email AND p1.id <> p2.id;

📍#4. 
Using row_number() window function
SELECT
distinct Email
FROM (
SELECT
Email,
row_number() OVER (partition by Email) as rn_email
FROM
Person ) email_rn
WHERE rn_email > 1

🌟It also calculates a row number for each row using the row_number() function.
The OVER (PARTITION BY Email) clause partitions the result set based on the values in the "Email" column. 
This means that rows with the same email address will be treated as a separate partition, and row numbers will reset for each partition.
