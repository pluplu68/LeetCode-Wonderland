Reverse bits of a given 32 bits unsigned integer.

Note:

Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.
 

Example 1:

Input: n = 00000010100101000001111010011100
Output:    964176192 (00111001011110000010100101000000)
Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.
Example 2:

Input: n = 11111111111111111111111111111101
Output:   3221225471 (10111111111111111111111111111111)
Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.

📍    def reverseBits(self, n: int) -> int:
        res = 0
        for i in range (32):
            res = (res << 1) | (n & 1)
            n >>= 1
        return res

🐽
res = (res << 1) | (n & 1):
Inside the loop, this line updates the value of res to reverse the bits.
(n & 1) extracts the rightmost bit (the least significant bit) of n by performing a bitwise AND operation with 1. This operation effectively checks whether the rightmost bit of n is 1 or 0.
(res << 1) shifts the bits in res to the left by one position. This effectively makes room for the next bit to be added.
| is a bitwise OR operation that combines the shifted res and the rightmost bit of n. It sets the rightmost bit of res to the same value as the rightmost bit of n.
This process effectively "reverses" the rightmost bit of n and adds it to the reversed result in res.

n >>= 1:
After reversing the rightmost bit, this line shifts the bits in n to the right by one position. This is done to process the next bit in the next iteration of the loop.
