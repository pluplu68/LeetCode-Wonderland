There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1

📍    def search(self, nums: List[int], target: int) -> int:
        l, r = 0, len(nums)-1  #define a range within the list where the binary search will operate.
        while l <= r:
            mid = (l+r)//2  #round down to nearest integer
            if target == nums[mid]:
                return mid

            #check left part    
            if nums[l] <= nums[mid]:  #handling cases where the left part of the list is sorted (ascending order). It compares the value at index l with the value at the midpoint mid.
                if target > nums[mid]: #moving the search range to the right half of the current range.
                    l = mid + 1
                elif target < nums[l]: #an additional condition for moving to the right part of the list.
                    l = mid + 1
                else: #not meet first 2 ifs-- the target value falls within the left part of the sorted list
                    r = mid -1

            #check right part (nums[l]>nums[mid]) #handling cases where the right part of the list is sorted (ascending order). It compares the value at index l with the value at the midpoint mid to determine this.
            else:
                if target < nums[mid]: #narrowing the search range to the left half of the current range.
                    r = mid -1
                elif target > nums[r]: #additional condition for moving to the left part of the list.
                    r = mid - 1
                else:     #the target value falls within the right part of the sorted list, so it updates the l pointer to mid + 1, effectively moving the search range to the right half.
                    l = mid + 1
        return -1


🛑Binary Search: This code demonstrates the binary search algorithm, which is a fundamental algorithm for searching for an element in a sorted list. 
Binary search is efficient, with a time complexity of O(log n), where n is the number of elements in the list. 
It repeatedly divides the search space in half, reducing the search time dramatically compared to linear search (O(n)).

🛑Handling Special Cases: The code handles a specific case where the input list is rotated or shifted. 
This situation is often encountered in real-world scenarios, such as in sorted arrays that have been rotated, 
and it shows how to adapt the binary search algorithm to handle such scenarios. 
This teaches the importance of algorithm flexibility and adaptability.
